time1Data <- data.frame(N=seq(1, 100, by=10), time=c(rfwv3Time, rfTime), model=c(rep("rf-wv3", 10), rep("rf", 10)))
ggplot(time1Data, aes(x=N, y=time, col=model)) + geom_line() + geom_point() +
theme_bw() + xlab("Number of test observations") + ylab("Prediction time")
time1Data <- data.frame(N=seq(1, 100, by=10), time=c(rfwv3Time, rfTime), Algorithm=c(rep("rf-wv3", 10), rep("rf", 10)))
ggplot(time1Data, aes(x=N, y=time, col=model)) + geom_line() + geom_point() +
theme_bw() + xlab("Number of test observations") + ylab("Prediction time")
ggplot(time1Data, aes(x=N, y=time, col=Algorithm)) + geom_line() + geom_point() +
theme_bw() + xlab("Number of test observations") + ylab("Prediction time")
ggplot(time1Data, aes(x=N, y=time, col=Algorithm)) + geom_line() + geom_point() +
theme_bw() + xlab("Number of test observations") + ylab("Prediction time") +
scale_color_manual(values=c("orange", "red"))
ggplot(time1Data, aes(x=N, y=time, col=Algorithm)) + geom_line() + geom_point() +
theme_bw() + xlab("Number of test observations") + ylab("Prediction time") +
scale_color_manual(values=c("orange", "skyblue"))
ggplot(time1Data, aes(x=N, y=time, col=Algorithm)) + geom_line() + geom_point() +
theme_bw() + xlab("Number of test observations") + ylab("Prediction time") +
scale_color_manual(values=c("skyblue", "red"))
ggplot(time1Data, aes(x=N, y=time, col=Algorithm)) + geom_line() + geom_point() +
theme_bw() + xlab("Number of test observations") + ylab("Prediction time") +
scale_color_manual(values=c("skyblue", "red")) + theme(legend.position=c(0.5, 0.5))
ggplot(time1Data, aes(x=N, y=time, col=Algorithm)) + geom_line() + geom_point() +
theme_bw() + xlab("Number of test observations") + ylab("Prediction time") +
scale_color_manual(values=c("skyblue", "red")) + theme(legend.position=c(0.1, 0.8))
ggplot(time1Data, aes(x=N, y=time, col=Algorithm)) + geom_line() + geom_point() +
theme_bw() + xlab("Number of test observations") + ylab("Prediction time") +
scale_color_manual(values=c("skyblue", "red")) + theme(legend.position=c(0.2, 0.7))
ggplot(time1Data, aes(x=N, y=time, col=Algorithm)) + geom_line() + geom_point() +
theme_bw() + xlab("Number of test observations") + ylab("Prediction time") +
scale_color_manual(values=c("skyblue", "red")) + theme(legend.position=c(0.1, 0.7))
time1Data <- data.frame(p=seq(2, 20, by=2), time=c(rfwv3Time2, rfTime2), Algorithm=c(rep("rf-wv3", 10), rep("rf", 10)))
ggplot(time1Data, aes(x=p, y=time, col=Algorithm)) + geom_line() + geom_point() +
theme_bw() + xlab("Number of input variables (N fixed at 20)") + ylab("Prediction time") +
scale_color_manual(values=c("skyblue", "red")) + theme(legend.position=c(0.1, 0.7))
time1Data <- data.frame(N=seq(1, 100, by=10), time=c(rfwv3Time, rfTime), Algorithm=c(rep("rf-wv3", 10), rep("rf", 10)))
ggplot(time1Data, aes(x=N, y=time, col=Algorithm)) + geom_line() + geom_point() +
theme_bw() + xlab("Number of test observations (p fixed at 5)") + ylab("Prediction time (in secs)") +
scale_color_manual(values=c("skyblue", "red")) + theme(legend.position=c(0.1, 0.7))
# plot comparisons with increase in p
time2Data <- data.frame(p=seq(2, 20, by=2), time=c(rfwv3Time2, rfTime2), Algorithm=c(rep("rf-wv3", 10), rep("rf", 10)))
ggplot(time2Data, aes(x=p, y=time, col=Algorithm)) + geom_line() + geom_point() +
theme_bw() + xlab("Number of input variables (N fixed at 20)") + ylab("Prediction time (in secs)") +
scale_color_manual(values=c("skyblue", "red")) + theme(legend.position=c(0.1, 0.7))
time1Data <- data.frame(N=seq(1, 100, by=10), time=c(rfwv3Time, rfTime), Algorithm=c(rep("rf-wv3", 10), rep("rf", 10)))
ggplot(time1Data, aes(x=N, y=time, col=Algorithm)) + geom_line() + geom_point() +
theme_bw() + xlab("Number of test observations (p fixed at 5)") + ylab("Prediction time (in secs)") +
scale_color_manual(values=c("skyblue", "red")) + theme(legend.position=c(0.2, 0.7))
# plot comparisons with increase in p
time2Data <- data.frame(p=seq(2, 20, by=2), time=c(rfwv3Time2, rfTime2), Algorithm=c(rep("rf-wv3", 10), rep("rf", 10)))
ggplot(time2Data, aes(x=p, y=time, col=Algorithm)) + geom_line() + geom_point() +
theme_bw() + xlab("Number of input variables (N fixed at 20)") + ylab("Prediction time (in secs)") +
scale_color_manual(values=c("skyblue", "red")) + theme(legend.position=c(0.2, 0.7))
setwd("/Users/arnupretorius/Google Drive/University/Masters/Thesis Code/Chapter 5")
list.files()
res1 <- readRDS("setup1Results.rda")
res2 <- readRDS("setup2Results.rda")
res3 <- readRDS("setup3Results.rda")
res4 <- readRDS("setup4Results.rda")
res5 <- readRDS("setup5Results.rda")
res6 <- readRDS("setup6Results.rda")
res7 <- readRDS("setup7Results.rda")
res8 <- readRDS("setup8Results.rda")
res9 <- readRDS("2dnormalsResultsTune.rda")
res10 <- readRDS("twonormResultsTune.rda")
res11 <- list(results=readRDS("threenormResultsTune.rda"))
res12 <- readRDS("ringnormResultsTune.rda")
res13 <- readRDS("circleResultsTune.rda")
res14 <- readRDS("cassiniResultsTune.rda")
res15 <- readRDS("cuboidsResultsTune.rda")
res16 <- readRDS("xorResultsTune.rda")
resList <- list(res1, res2, res3, res4, res5, res6, res7, res8, res9, res10, res11,
res12, res13, res14, res15, res16)
tableFinal <- NULL
for(k in 1:length(resList)){
res <- resList[[k]]
splitDat <- split(res$results, res$results$model)
cname <- unique(res$results$model)
rname <- unique(res$results$Decomposition)
tableFrame <- matrix(0, nrow=length(rname), ncol=length(cname))
for(i in 1:length(splitDat)){
tableFrame[,i] <- splitDat[[i]]$vb
}
rownames(tableFrame) <- paste(k, rname)
colnames(tableFrame) <- cname
tableFinal <- rbind(tableFinal, tableFrame)
}
tableFinal <- as.data.frame(tableFinal)
tableFinal
res1$results
9-1
15-9
nrow(tableFinal)
SEIndex <- seq(3, 96, by=6)
SEIndex
VEIndex <- seq(4, 96, by=6)
biasIndex <- seq(5, 96, by=6)
varIndex <- seq(6, 96, by=6)
tableFinal[biasIndex, 1]
?cor
TreeCors <- c(cor(tableFinal[biasIndex, 1], tableFinal[SEIndex, 1]),
cor(tableFinal[varIndex, 1], tableFinal[VEIndex, 1]))
baggingCors <- c(cor(tableFinal[biasIndex, 2], tableFinal[SEIndex, 2]),
cor(tableFinal[varIndex, 2], tableFinal[VEIndex, 2]))
RFCors <- c(cor(tableFinal[biasIndex, 3], tableFinal[SEIndex, 3]),
cor(tableFinal[varIndex, 3], tableFinal[VEIndex, 3]))
boostingCors <- c(cor(tableFinal[biasIndex, 4], tableFinal[SEIndex, 4]),
cor(tableFinal[varIndex, 4], tableFinal[VEIndex, 4]))
treeCors <- c(cor(tableFinal[biasIndex, 1], tableFinal[SEIndex, 1]),
cor(tableFinal[varIndex, 1], tableFinal[VEIndex, 1]))
treeCors
baggingCors
RFCors
boostingCors
?median
biasSECor <- median(treeCors[1], baggingCors[1], RFCors[1], boostingCors[1])
varVECor <- median(treeCors[2], baggingCors[2], RFCors[2], boostingCors[2])
biasSECor <- median(c(treeCors[1], baggingCors[1], RFCors[1], boostingCors[1]))
varVECor <- median(c(treeCors[2], baggingCors[2], RFCors[2], boostingCors[2]))
biasSECor
varVECor
res1$tuneValues
res1$tuneValues[[1]]
sd(res1$tuneValues[[1]])
res1$tuneValues[[2]]
res1$tuneValues[[3]]
sd(res1$tuneValues[[3]])
hist(res1$tuneValues[[3]])
res1$tuneValues[[4]]
res1$tuneValues[[4]][,2]
sd(res1$tuneValues[[4]][,2])
sd(res1$tuneValues[[4]][,3])
hist(res1$tuneValues[[4]][,3])
res1$tuneValues[[3]]
ggplot(data.frame(mtry=res1$tuneValues[[3]]), aes(y=mtry)) + geom_bar(stat="identity")
library(ggplot2)
ggplot(data.frame(mtry=res1$tuneValues[[3]]), aes(y=mtry)) + geom_bar(stat="identity")
ggplot(data.frame(mtry=res1$tuneValues[[3]]), aes(x=mtry)) + geom_bar(stat="identity")
data.frame(mtry=res1$tuneValues[[3]])
ggplot(data.frame(mtry=res1$tuneValues[[3]]), aes(y=mtry)) + geom_bar(stat="identity")
ggplot(data.frame(mtry=res1$tuneValues[[3]]), aes(y=mtry)) + geom_histogram(stat="identity")
ggplot(data.frame(mtry=res1$tuneValues[[3]]), aes(y=mtry)) + geom_histogram()
ggplot(data.frame(mtry=res1$tuneValues[[3]]), aes(y=mtry)) + geom_histogram(stat = "identity")
ggplot(data.frame(mtry=res1$tuneValues[[3]]), aes(y=mtry)) + geom_histogram(stat = "identity", bins=30)
ggplot(data.frame(mtry=res1$tuneValues[[3]]), aes(y=mtry)) + geom_histogram()
ggplot(data.frame(mtry=res1$tuneValues[[3]]), aes(x=unique(mtry), y=mtry)) + geom_bar()
ggplot(data.frame(mtry=res1$tuneValues[[3]]), aes(x=unique(mtry), y=mtry)) + geom_bar(stat="identity")
ggplot(data.frame(mtry=res1$tuneValues[[3]]), aes(x=1:100, y=mtry)) + geom_bar(stat="identity")
ggplot(data.frame(mtry=res1$tuneValues[[3]]), aes(x=1:100, y=mtry)) + geom_line() + geom_point()
library(plyr)
library(dplyr)
summary(res1$tuneValues[[3]])
summary(factor(res1$tuneValues[[3]]))
barData <- summary(factor(res1$tuneValues[[3]]))
names(barData)
as.numeric(names(barData))
barData <- summary(factor(res1$tuneValues[[3]]))
ggplot(data.frame(mtry=res1$tuneValues[[3]]), aes(x=1:100, y=mtry)) + geom_line() + geom_point()
ggplot(data.frame(x=names(barData), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity")
g1 <- ggplot(data.frame(mtry=tuneVals1), aes(x=1:100, y=mtry)) + geom_line() + geom_point()
g2 <- ggplot(data.frame(x=names(barData), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity")
grid.arrange(g1,g2, ncol=2)
library(gridExtra)
grid.arrange(g1,g2, ncol=2)
tuneVals1 <- res1$tuneValues[[3]]
sd1 <- sd(tuneVals1)
barData1 <- summary(factor(tuneVals1))
g1 <- ggplot(data.frame(mtry=tuneVals1), aes(x=1:100, y=mtry)) + geom_line() + geom_point()
g2 <- ggplot(data.frame(x=names(barData), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity")
grid.arrange(g1,g2, ncol=2)
tuneVals1
unique(tuneVals1)
sort(unique(tuneVals1))
barData1 <- summary(factor(tuneVals1, levels=sort(unique(tuneVals1))))
barData
g1 <- ggplot(data.frame(mtry=tuneVals1), aes(x=1:100, y=mtry)) + geom_line() + geom_point()
g2 <- ggplot(data.frame(x=names(barData), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity")
grid.arrange(g1,g2, ncol=2)
names(barData)
g1 <- ggplot(data.frame(mtry=tuneVals1), aes(x=1:100, y=mtry)) + geom_line() + geom_point()
g2 <- ggplot(data.frame(x=as.numeric(names(barData)), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity")
grid.arrange(g1,g2, ncol=2)
g1 <- ggplot(data.frame(mtry=tuneVals1), aes(x=1:100, y=mtry)) + geom_line() + geom_point()
g2 <- ggplot(data.frame(x=factor(as.numeric(names(barData))), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity")
grid.arrange(g1,g2, ncol=2)
tuneVals1 <- res1$tuneValues[[3]]
sd1 <- sd(tuneVals1)
barData1 <- summary(factor(tuneVals1, levels=sort(unique(tuneVals1))))
g1 <- ggplot(data.frame(mtry=tuneVals1), aes(x=1:100, y=mtry)) + geom_line() + geom_point() +
theme_bw() + xlab("Variable subsample size") + ylab("Training set")
g2 <- ggplot(data.frame(x=factor(as.numeric(names(barData))), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity") +
theme_bw() + xlab("Variable subsample sze") + ylab("Frequency")
grid.arrange(g1,g2, ncol=2)
g1 <- ggplot(data.frame(mtry=tuneVals1), aes(x=1:100, y=mtry)) + geom_line(col="darkorange") + geom_point() +
theme_bw() + xlab("Variable subsample size") + ylab("Training set")
g2 <- ggplot(data.frame(x=factor(as.numeric(names(barData))), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity", col="skyblue") +
theme_bw() + xlab("Variable subsample sze") + ylab("Frequency")
grid.arrange(g1,g2, ncol=2)
g1 <- ggplot(data.frame(mtry=tuneVals1), aes(x=1:100, y=mtry)) + geom_line(col="darkorange") + geom_point() +
theme_bw() + xlab("Variable subsample size") + ylab("Training set")
g2 <- ggplot(data.frame(x=factor(as.numeric(names(barData))), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity", fill="skyblue") +
theme_bw() + xlab("Variable subsample sze") + ylab("Frequency")
grid.arrange(g1,g2, ncol=2)
g1 <- ggplot(data.frame(mtry=tuneVals1), aes(x=1:100, y=mtry)) + geom_line(col="darkorange") + geom_point() +
theme_bw() + xlab("Variable subsample size") + ylab("Training set")
g2 <- ggplot(data.frame(x=factor(as.numeric(names(barData))), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity", fill="skyblue", col="blue") +
theme_bw() + xlab("Variable subsample sze") + ylab("Frequency")
grid.arrange(g1,g2, ncol=2)
g1 <- ggplot(data.frame(mtry=tuneVals1), aes(x=1:100, y=mtry)) + geom_line(col="darkorange") + geom_point() +
theme_bw() + xlab("Variable subsample size") + ylab("Training set")
g2 <- ggplot(data.frame(x=factor(as.numeric(names(barData))), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity", fill="skyblue") +
theme_bw() + xlab("Variable subsample sze") + ylab("Frequency")
grid.arrange(g1,g2, ncol=2)
g1 <- ggplot(data.frame(mtry=tuneVals1), aes(x=1:100, y=mtry)) + geom_line(col="darkorange") + geom_point() +
theme_bw() + ylab("Variable subsample size") + xlab("Training set")
g2 <- ggplot(data.frame(x=factor(as.numeric(names(barData))), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity", fill="skyblue") +
theme_bw() + xlab("Variable subsample size") + ylab("Frequency")
grid.arrange(g1,g2, ncol=2)
grid.arrange(g1,g2, ncol=2, title(main = paste("mvnorm: p=15, \rho=0.9; SD=", sd1)))
grid.arrange(g1,g2, ncol=2, main = paste("mvnorm: p=15, \rho=0.9; SD=", sd1))
grid.arrange(g1,g2, ncol=2, title = paste("mvnorm: p=15, \rho=0.9; SD=", sd1))
?grid.arrange
grid.arrange(g1,g2, ncol=2, main = textGrob(paste("mvnorm: p=15, \rho=0.9; SD=", sd1)))
library(grid)
grid.arrange(g1,g2, ncol=2, main = textGrob(paste("mvnorm: p=15, \rho=0.9; SD=", sd1)))
grid.arrange(g1,g2, ncol=2, main = textGrob(expression(paste("mvnorm: p=15, \rho=0.9; SD=", sd1))))
grid.arrange(g1,g2, ncol=2, main = textGrob(expression(paste("mvnorm: p=15, rho=0.9; SD=", sd1))))
grid.arrange(g1,g2, ncol=2, top = textGrob(expression(paste("mvnorm: p=15, rho=0.9; SD=", sd1))))
grid.arrange(g1,g2, ncol=2, top = textGrob(paste(TeX("mvnorm: $p=15, \\rho=0.9$; SD="), sd1)))
library(latex2exp)
grid.arrange(g1,g2, ncol=2, top = textGrob(paste(TeX("mvnorm: $p=15, \\rho=0.9$; SD="), sd1)))
TeX("mvnorm: $p=15, \\rho=0.9$; SD=")
TeX("$p=15, \\rho=0.9$")
TeX("$$p=15, \\rho=0.9$$")
grid.arrange(g1,g2, ncol=2, top = textGrob(paste("mvnorm: ", TeX("$p=15, \\rho=0.9$"), sd1)))
grid.arrange(g1,g2, ncol=2, top = textGrob(TeX("$p=15, \\rho=0.9$")))
grid.arrange(g1,g2, ncol=2, top = textGrob(TeX("$p=15, \rho=0.9$")))
grid.arrange(g1,g2, ncol=2, top = textGrob(expression("p=15, rho=0.9")))
grid.arrange(g1,g2, ncol=2, top = textGrob(expression("p=15, mu=0.9")))
grid.arrange(g1,g2, ncol=2, top = textGrob(expression("p=15, beta=0.9")))
grid.arrange(g1,g2, ncol=2, top = textGrob(label = expression(paste("p=15, beta=0.9"))))
grid.arrange(g1,g2, ncol=2, top = textGrob(label = expression(paste("mvnorm: p=15, corr=0.9; SD = ", sd1))))
grid.arrange(g1,g2, ncol=2, top = textGrob(label = paste("mvnorm: p=15, corr=0.9; SD = ", sd1)))
tuneVals1 <- res1$tuneValues[[3]]
sd1 <- round(sd(tuneVals1), 2)
barData1 <- summary(factor(tuneVals1, levels=sort(unique(tuneVals1))))
g1 <- ggplot(data.frame(mtry=tuneVals1), aes(x=1:100, y=mtry)) + geom_line(col="darkorange") + geom_point() +
theme_bw() + ylab("Variable subsample size") + xlab("Training set")
g2 <- ggplot(data.frame(x=factor(as.numeric(names(barData))), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity", fill="skyblue") +
theme_bw() + xlab("Variable subsample size") + ylab("Frequency")
grid.arrange(g1,g2, ncol=2, top = textGrob(label = paste("mvnorm: p=15, corr=0.9; SD = ", sd1)))
grid.arrange(g1,g2, ncol=2, top = textGrob(label = paste("mvnorm: p=15, corr=0.9; [ SD = ", sd1, " ]")))
tuneVals1 <- res1$tuneValues[[3]]
sd1 <- round(sd(tuneVals1), 2)
barData1 <- summary(factor(tuneVals1, levels=sort(unique(tuneVals1))))
g1 <- ggplot(data.frame(mtry=tuneVals1), aes(x=1:100, y=mtry)) + geom_line(col="darkorange") + geom_point() +
theme_bw() + ylab("Variable subsample size") + xlab("Training set")
g2 <- ggplot(data.frame(x=factor(as.numeric(names(barData))), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity", fill="skyblue") +
theme_bw() + xlab("Variable subsample size") + ylab("Frequency")
grid.arrange(g1,g2, ncol=2, top = textGrob(label = paste("mvnorm: p=15, corr=0.9; [ SD = ", sd1, " ]")))
# data set 1
# plot line and bar plot
tuneVals2 <- res2$tuneValues[[3]]
sd2 <- round(sd(tuneVals2), 2)
barData2 <- summary(factor(tuneVals2, levels=sort(unique(tuneVals2))))
g1 <- ggplot(data.frame(mtry=tuneVals2), aes(x=1:100, y=mtry)) + geom_line(col="darkorange") + geom_point() +
theme_bw() + ylab("Variable subsample size") + xlab("Training set")
g2 <- ggplot(data.frame(x=factor(as.numeric(names(barData))), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity", fill="skyblue") +
theme_bw() + xlab("Variable subsample size") + ylab("Frequency")
grid.arrange(g1,g2, ncol=2, top = textGrob(label = paste("mvnorm: p=15, corr=0.5; [ SD = ", sd2, " ]")))
# data set 3
# plot line and bar plot
tuneVals3 <- res3$tuneValues[[3]]
sd3 <- round(sd(tuneVals3), 2)
barData3 <- summary(factor(tuneVals3, levels=sort(unique(tuneVals3))))
g1 <- ggplot(data.frame(mtry=tuneVals3), aes(x=1:100, y=mtry)) + geom_line(col="darkorange") + geom_point() +
theme_bw() + ylab("Variable subsample size") + xlab("Training set")
g2 <- ggplot(data.frame(x=factor(as.numeric(names(barData))), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity", fill="skyblue") +
theme_bw() + xlab("Variable subsample size") + ylab("Frequency")
grid.arrange(g1,g2, ncol=2, top = textGrob(label = paste("mvnorm: p=15, corr=0.1; [ SD = ", sd3, " ]")))
# data set 4
# plot line and bar plot
tuneVals4 <- res4$tuneValues[[3]]
sd4 <- round(sd(tuneVals4), 2)
barData4 <- summary(factor(tuneVals4, levels=sort(unique(tuneVals4))))
g1 <- ggplot(data.frame(mtry=tuneVals4), aes(x=1:100, y=mtry)) + geom_line(col="darkorange") + geom_point() +
theme_bw() + ylab("Variable subsample size") + xlab("Training set")
g2 <- ggplot(data.frame(x=factor(as.numeric(names(barData))), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity", fill="skyblue") +
theme_bw() + xlab("Variable subsample size") + ylab("Frequency")
grid.arrange(g1,g2, ncol=2, top = textGrob(label = paste("mvnorm: p=15, corr=0; [ SD = ", sd4, " ]")))
# data set 5
# plot line and bar plot
tuneVals5 <- res5$tuneValues[[3]]
sd5 <- round(sd(tuneVals5), 2)
barData5 <- summary(factor(tuneVals5, levels=sort(unique(tuneVals5))))
g1 <- ggplot(data.frame(mtry=tuneVals5), aes(x=1:100, y=mtry)) + geom_line(col="darkorange") + geom_point() +
theme_bw() + ylab("Variable subsample size") + xlab("Training set")
g2 <- ggplot(data.frame(x=factor(as.numeric(names(barData))), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity", fill="skyblue") +
theme_bw() + xlab("Variable subsample size") + ylab("Frequency")
grid.arrange(g1,g2, ncol=2, top = textGrob(label = paste("Mease (2008): p=30, J=2; [ SD = ", sd5, " ]")))
# data set 6
# plot line and bar plot
tuneVals6 <- res6$tuneValues[[3]]
sd6 <- round(sd(tuneVals6), 2)
barData6 <- summary(factor(tuneVals6, levels=sort(unique(tuneVals6))))
g1 <- ggplot(data.frame(mtry=tuneVals6), aes(x=1:100, y=mtry)) + geom_line(col="darkorange") + geom_point() +
theme_bw() + ylab("Variable subsample size") + xlab("Training set")
g2 <- ggplot(data.frame(x=factor(as.numeric(names(barData))), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity", fill="skyblue") +
theme_bw() + xlab("Variable subsample size") + ylab("Frequency")
grid.arrange(g1,g2, ncol=2, top = textGrob(label = paste("Mease (2008): p=30, J=5; [ SD = ", sd6, " ]")))
# data set 7
# plot line and bar plot
tuneVals7 <- res7$tuneValues[[3]]
sd7 <- round(sd(tuneVals7), 2)
barData7 <- summary(factor(tuneVals7, levels=sort(unique(tuneVals7))))
g1 <- ggplot(data.frame(mtry=tuneVals7), aes(x=1:100, y=mtry)) + geom_line(col="darkorange") + geom_point() +
theme_bw() + ylab("Variable subsample size") + xlab("Training set")
g2 <- ggplot(data.frame(x=factor(as.numeric(names(barData))), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity", fill="skyblue") +
theme_bw() + xlab("Variable subsample size") + ylab("Frequency")
grid.arrange(g1,g2, ncol=2, top = textGrob(label = paste("Mease (2008): p=30, J=15; [ SD = ", sd7, " ]")))
# data set 8
# plot line and bar plot
tuneVals8 <- res8$tuneValues[[3]]
sd8 <- round(sd(tuneVals8), 2)
barData8 <- summary(factor(tuneVals8, levels=sort(unique(tuneVals8))))
g1 <- ggplot(data.frame(mtry=tuneVals8), aes(x=1:100, y=mtry)) + geom_line(col="darkorange") + geom_point() +
theme_bw() + ylab("Variable subsample size") + xlab("Training set")
g2 <- ggplot(data.frame(x=factor(as.numeric(names(barData))), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity", fill="skyblue") +
theme_bw() + xlab("Variable subsample size") + ylab("Frequency")
grid.arrange(g1,g2, ncol=2, top = textGrob(label = paste("Mease (2008): p=30, J=20; [ SD = ", sd8, " ]")))
# data set 9
# plot line and bar plot
tuneVals9 <- res9$tuneValues[[3]]
sd9 <- round(sd(tuneVals9), 2)
barData9 <- summary(factor(tuneVals9, levels=sort(unique(tuneVals9))))
g1 <- ggplot(data.frame(mtry=tuneVals9), aes(x=1:100, y=mtry)) + geom_line(col="darkorange") + geom_point() +
theme_bw() + ylab("Variable subsample size") + xlab("Training set")
g2 <- ggplot(data.frame(x=factor(as.numeric(names(barData))), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity", fill="skyblue") +
theme_bw() + xlab("Variable subsample size") + ylab("Frequency")
grid.arrange(g1,g2, ncol=2, top = textGrob(label = paste("2dnormals: p=2, K=6; [ SD = ", sd9, " ]")))
# data set 10
# plot line and bar plot
tuneVals10 <- res10$tuneValues[[3]]
sd10 <- round(sd(tuneVals10), 2)
barData10 <- summary(factor(tuneVals10, levels=sort(unique(tuneVals10))))
g1 <- ggplot(data.frame(mtry=tuneVals10), aes(x=1:100, y=mtry)) + geom_line(col="darkorange") + geom_point() +
theme_bw() + ylab("Variable subsample size") + xlab("Training set")
g2 <- ggplot(data.frame(x=factor(as.numeric(names(barData))), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity", fill="skyblue") +
theme_bw() + xlab("Variable subsample size") + ylab("Frequency")
grid.arrange(g1,g2, ncol=2, top = textGrob(label = paste("Twonorm: p=20, K=2; [ SD = ", sd10, " ]")))
# data set 11
# plot line and bar plot
tuneVals11 <- res11$tuneValues[[3]]
sd11 <- round(sd(tuneVals11), 2)
barData11 <- summary(factor(tuneVals11, levels=sort(unique(tuneVals11))))
g1 <- ggplot(data.frame(mtry=tuneVals11), aes(x=1:100, y=mtry)) + geom_line(col="darkorange") + geom_point() +
theme_bw() + ylab("Variable subsample size") + xlab("Training set")
g2 <- ggplot(data.frame(x=factor(as.numeric(names(barData))), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity", fill="skyblue") +
theme_bw() + xlab("Variable subsample size") + ylab("Frequency")
grid.arrange(g1,g2, ncol=2, top = textGrob(label = paste("Threenorm: p=20, K=2; [ SD = ", sd11, " ]")))
# data set 12
# plot line and bar plot
tuneVals12 <- res12$tuneValues[[3]]
sd12 <- round(sd(tuneVals12), 2)
barData12 <- summary(factor(tuneVals12, levels=sort(unique(tuneVals12))))
g1 <- ggplot(data.frame(mtry=tuneVals12), aes(x=1:100, y=mtry)) + geom_line(col="darkorange") + geom_point() +
theme_bw() + ylab("Variable subsample size") + xlab("Training set")
g2 <- ggplot(data.frame(x=factor(as.numeric(names(barData))), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity", fill="skyblue") +
theme_bw() + xlab("Variable subsample size") + ylab("Frequency")
grid.arrange(g1,g2, ncol=2, top = textGrob(label = paste("Ringnorm: p=20, K=2; [ SD = ", sd12, " ]")))
# data set 13
# plot line and bar plot
tuneVals13 <- res13$tuneValues[[3]]
sd13 <- round(sd(tuneVals13), 2)
barData13 <- summary(factor(tuneVals13, levels=sort(unique(tuneVals13))))
g1 <- ggplot(data.frame(mtry=tuneVals13), aes(x=1:100, y=mtry)) + geom_line(col="darkorange") + geom_point() +
theme_bw() + ylab("Variable subsample size") + xlab("Training set")
g2 <- ggplot(data.frame(x=factor(as.numeric(names(barData))), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity", fill="skyblue") +
theme_bw() + xlab("Variable subsample size") + ylab("Frequency")
grid.arrange(g1,g2, ncol=2, top = textGrob(label = paste("Circle: p=20, K=2; [ SD = ", sd13, " ]")))
# data set 14
# plot line and bar plot
tuneVals14 <- res14$tuneValues[[3]]
sd14 <- round(sd(tuneVals14), 2)
barData14 <- summary(factor(tuneVals14, levels=sort(unique(tuneVals14))))
g1 <- ggplot(data.frame(mtry=tuneVals14), aes(x=1:100, y=mtry)) + geom_line(col="darkorange") + geom_point() +
theme_bw() + ylab("Variable subsample size") + xlab("Training set")
g2 <- ggplot(data.frame(x=factor(as.numeric(names(barData))), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity", fill="skyblue") +
theme_bw() + xlab("Variable subsample size") + ylab("Frequency")
grid.arrange(g1,g2, ncol=2, top = textGrob(label = paste("Cassini: p=2, K=3; [ SD = ", sd14, " ]")))
# data set 15
# plot line and bar plot
tuneVals15 <- res15$tuneValues[[3]]
sd15 <- round(sd(tuneVals15), 2)
barData15 <- summary(factor(tuneVals15, levels=sort(unique(tuneVals15))))
g1 <- ggplot(data.frame(mtry=tuneVals15), aes(x=1:100, y=mtry)) + geom_line(col="darkorange") + geom_point() +
theme_bw() + ylab("Variable subsample size") + xlab("Training set")
g2 <- ggplot(data.frame(x=factor(as.numeric(names(barData))), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity", fill="skyblue") +
theme_bw() + xlab("Variable subsample size") + ylab("Frequency")
grid.arrange(g1,g2, ncol=2, top = textGrob(label = paste("Cuboids: p=3, K=4; [ SD = ", sd15, " ]")))
# data set 16
# plot line and bar plot
tuneVals16 <- res16$tuneValues[[3]]
sd16 <- round(sd(tuneVals16), 2)
barData16 <- summary(factor(tuneVals16, levels=sort(unique(tuneVals16))))
g1 <- ggplot(data.frame(mtry=tuneVals16), aes(x=1:100, y=mtry)) + geom_line(col="darkorange") + geom_point() +
theme_bw() + ylab("Variable subsample size") + xlab("Training set")
g2 <- ggplot(data.frame(x=factor(as.numeric(names(barData))), y=barData), aes(x=x, y=y)) + geom_bar(stat="identity", fill="skyblue") +
theme_bw() + xlab("Variable subsample size") + ylab("Frequency")
grid.arrange(g1,g2, ncol=2, top = textGrob(label = paste("XOR: p=2, K=2; [ SD = ", sd16, " ]")))
res11
library(mlbench)
library(caret)
library(ggplot2)
majVote <- function(x){names(which.max(table(x)))}
nTrain <- 400
nTest <- 1000
Models <- factor(rep(c("Tree", "Bagging", "Forest-RI", "Boosting"), each=6), level=c("Tree", "Bagging", "Forest-RI", "Boosting"))
# performs computations in parallel
library(doSNOW)
cl <- makeCluster(3, type="SOCK")
registerDoSNOW(cl)
# MAIN EXPERIMENT FUNCTIONS
runBiasVarSimulation <- function(trainingSets, simTest, BayesPreds){
loss <- ifelse(length(levels(simTest$classes)) > 2, "multinomial", "adaboost")
# parameter tuning settings
fitControl <- trainControl(method = "cv", number = 10)
treeparaGrid <- expand.grid(cp=seq(0.1, 1, by=0.1))
rfparaGrid <- expand.grid(mtry=seq(1, ncol(simTest)-2, by=2))
gbmparaGrid <- expand.grid(n.trees=200, interaction.depth=c(1, 6), shrinkage=c(0.01, 0.05, 0.1),
n.minobsinnode=10)
#boostparaGrid <- expand.grid(mfinal=200, maxdepth=c(1, 6), coeflearn="Freund")
# boosting model
sim.Boost <- simulateBiasVarDecomp(trainingSets=trainingSets, simTest=simTest,
method="gbm", paraGrid = gbmparaGrid, tControl=fitControl,
BayesPreds=BayesPreds, distribution=loss ,verbose=FALSE)
# single tree model
sim.Tree <- simulateBiasVarDecomp(trainingSets=trainingSets, simTest=simTest,
method="rpart", paraGrid = treeparaGrid, tControl=fitControl, BayesPreds=BayesPreds)
# bagging model
sim.Bag <- simulateBiasVarDecomp(trainingSets=trainingSets, simTest=simTest,
method="treebag", paraGrid=NULL, tControl=trainControl(method="none"),
BayesPreds=BayesPreds, nbagg=200)
# random forest model
sim.RF <- simulateBiasVarDecomp(trainingSets=trainingSets, simTest=simTest,
method="rf", paraGrid = rfparaGrid, tControl=fitControl,
BayesPreds=BayesPreds, ntree=200)
list(results=rbind(sim.Tree$results, sim.Bag$results, sim.RF$results, sim.Boost$results),
tuneValues=list(sim.Tree$tuneValues, sim.Bag$tuneValues, sim.RF$tuneValues, sim.Boost$tuneValues))
}
simulateBiasVarDecomp <- function(trainingSets, simTest, method, paraGrid, tControl, BayesPreds, ...){
#################################################
# BIAS VARIANCE EXPERMIMENT USING MLBENCH DATA  #
#################################################
# ----------------------------------------------------------------------------------------
library(mlbench)
library(caret)
library(ggplot2)
majVote <- function(x){names(which.max(table(x)))}
tuneVals <- paraGrid[1,]
numOfExp <- 100
# ----------------------------------------------------------------------------------------
#######################################################
# Bias and variance for single tree model 2d normals
#######################################################
# train models and make predictions
BVpreds <- matrix(0, nrow=numOfExp, ncol=nTest)
var.T <- NULL
var <- NULL
bias <- NULL
VE <- NULL
SE <- NULL
misclassError <- NULL
C <- as.numeric(simTest$classes)
# train models
for(j in 1:numOfExp){
Model <- train(classes~., data=trainingSets[[j]], method=method,
tuneGrid=paraGrid, trControl=tControl, ...)
tuneVals <- rbind(tuneVals, Model$bestTune)
BVpreds[j,] <- as.numeric(predict(Model, simTest))
print(paste("Method: ", method, ", Iter: ", j, " out of ", numOfExp))
}
# James (2003) decomposition estimates
BayesClassifier <- BayesPreds
majVoteClassifier <- apply(BVpreds, 2, function(x)majVote(x))
var.T <- mean(BayesClassifier != C)
var <- mean(apply(BVpreds, 1, function(x) mean(x != majVoteClassifier)))
bias <- mean(majVoteClassifier != BayesClassifier)
VE <- mean(apply(BVpreds, 1, function(x) mean(x != C)) - mean(majVoteClassifier != C))
SE <- mean(majVoteClassifier != C) - mean(BayesClassifier != C)
meanError <- mean(apply(BVpreds, 1, function(x){ mean(x != C) }))
# plot bias and variance and systematic effect and variance effect
vb <- c(meanError, var.T, SE, VE, bias, var)
bar <- factor(c(1,2,3,4,5,6))
type <- c("Error", "Bayes Error", "Systematic Effect", "Variance Effect", "Bias", "Variance")
model <- rep(method, 6)
biasVarPlotData <- data.frame(vb=vb, Decomposition=type, bar=bar, model=model)
list(results=biasVarPlotData, tuneValues=tuneVals[-1,])
}
list.files()
trainingSets <- list()
for(i in 1:100){
set.seed(i+1)
train <- mlbench.threenorm(400, d=20)
train <- as.data.frame(train)
trainingSets[[i]] <- train
}
# simulate test data set
set.seed(1)
test <- mlbench.threenorm(1000, d=20)
testFrame <- as.data.frame(test)
simTest <- testFrame
# run simulation and plot data
threenormResults <- runBiasVarSimulation(trainingSets, simTest, bayesclass(test))
